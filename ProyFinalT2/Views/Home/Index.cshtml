@{
    ViewData["Title"] = "Listado tareas";
}

<div class="text-center">
    <h1 class="display-4">Mis tareas</h1>
    <button type="button" class="btn btn-primary mb-3" onclick="agregarNuevaTareaAlListado()">
        Agregar nueva tarea
    </button>
</div>


<div id="contenedor-listado-tareas" class="text-center">
    <div id="reordenable" class="text-start" data-bind="foreach: tareas">
        <div name="tarea" class="border mb-2 p-2" style="cursor: pointer"
             data-bind="click: manejarClickTarea">
            <div data-bind="text: titulo, hidden: esNuevo" class="fw-bold">
            </div>

            <div name="pasos-resumen" data-bind="visible: pasosTotal() > 0">
                <span data-bind="text: pasosRealizados">
                </span>/<span data-bind="text: pasosTotal">
                </span>
                <span data-bind="text: porcentajeCompletado">

                </span>
            </div>

            <input type="text" name="titulo-tarea" autocomplete="off"
                   data-bind="value: titulo, visible: esNuevo,
                    attr: {'data-id': id},
                    event: {focusout: manejarFocusoutTituloTarea}" />

        </div>
    </div>

    <div data-bind="visible: cargando" class="spinner-border">
        <span class="visually-hidden">Cargando...</span>
    </div>

    <div data-bind="visible: noHayTareas">
        No existen tareas para mostrar
    </div>

</div>

<partial name="_ModalEditarTarea" />

@section Scripts {

    <script src="~/js/utilidades.js" asp-append-version="true"></script>
    <script src="~/js/tareas.js" asp-append-version="true"></script>
    <script src="~/js/pasos.js" asp-append-version="true"></script>

    <script>

        // Definimos las URLs para obtener las tareas y los pasos desde la API.
        const urlTareas = "/api/tareas";
        const urlPasos = "/api/pasos";

        // Seleccionamos el modal de edición de tareas del DOM.
        const modalEditarTarea = document.getElementById('modal-editar-tarea');

        // Inicializamos el modal de Bootstrap para poder abrirlo y cerrarlo dinámicamente.
        const modalEditarTareaBootstrap = new bootstrap.Modal(modalEditarTarea);

        /**
         * ViewModel para manejar el listado de tareas.
         */
        function tareaListadoViewModelFn() {
            var self = this;

            // Array observable que almacena la lista de tareas.
            self.tareas = ko.observableArray([]);

            // Variable observable para indicar si la lista se está cargando.
            self.cargando = ko.observable(true);

            // Computed observable para determinar si no hay tareas disponibles.
            self.noHayTareas = ko.pureComputed(function () {
                if (self.cargando()) {
                    return false; // Mientras se carga, no se puede determinar si hay tareas o no.
                }
                return self.tareas().length === 0; // Si la lista está vacía y no está cargando, no hay tareas.
            });
        }

        /**
         * ViewModel para representar una tarea en el listado.
         *  {Object} param0 - Datos de la tarea.
         */
        function tareaElementoListadoViewModel({ id, titulo, pasosTotal, pasosRealizados }) {
            var self = this;

            // Observables para los datos de la tarea.
            self.id = ko.observable(id);
            self.titulo = ko.observable(titulo);
            self.pasosTotal = ko.observable(pasosTotal);
            self.pasosRealizados = ko.observable(pasosRealizados);

            // Computed observable para determinar si la tarea es nueva (ID = 0).
            self.esNuevo = ko.pureComputed(function () {
                return self.id() == 0;
            });

            // Computed observable para calcular el porcentaje de pasos completados.
            self.porcentajeCompletado = ko.pureComputed(function () {
                const calculo = Math.round(self.pasosRealizados() * 1.0 / self.pasosTotal() * 100);
                return `(${calculo}%)`; // Retorna un string con el porcentaje.
            });
        }

        // ViewModel para manejar la edición de tareas.
        const tareaEditarVM = {
            id: 0, // ID de la tarea en edición (0 si es nueva).
            titulo: ko.observable(''), // Título de la tarea.
            descripcion: ko.observable(''), // Descripción de la tarea.
            pasos: ko.observableArray([]) // Lista de pasos de la tarea.
        };

        // Se crea una instancia del ViewModel del listado de tareas.
        const tareaListadoViewModel = new tareaListadoViewModelFn();

        /*
          ViewModel para representar un paso dentro de una tarea.
           {Object} param0 - Datos del paso.
         */
        function pasoViewModel({ id, descripcion, realizado, modoEdicion }) {
            var self = this;

            // Observables para los datos del paso.
            self.id = ko.observable(id || 0);
            self.descripcion = ko.observable(descripcion || '');
            self.descripcionAnterior = ''; // Guarda la descripción antes de la edición.
            self.realizado = ko.observable(realizado);
            self.modoEdicion = ko.observable(modoEdicion);

            // Computed observable para determinar si el paso es nuevo.
            self.esNuevo = ko.pureComputed(function () {
                return self.id() == 0;
            });
        }

        // Función para obtener las tareas (debería implementar la lógica de llamada a la API).
        obtenerTareas();

        // Aplicamos los bindings de Knockout.js a los elementos del DOM correspondientes.
        ko.applyBindings(tareaListadoViewModel, document.getElementById('contenedor-listado-tareas'));
        ko.applyBindings(tareaEditarVM, document.getElementById('modal-editar-tarea'));

    </script>
}